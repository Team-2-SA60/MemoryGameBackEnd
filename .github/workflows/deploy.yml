name: Build and Deploy .NET App with Docker

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: yourapp
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up .NET SDK
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: 8.0.x

  #   - name: Restore dependencies
  #     run: dotnet restore

  #   - name: Build and test
  #     run: |
  #       dotnet build --no-restore
  #       dotnet test --no-build --verbosity normal

  #   - name: Log in to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKER_USER }}
  #       password: ${{ secrets.DOCKER_TOKEN }}

  #   - name: Build Docker image
  #     working-directory: MemoryGameBackEnd
  #     run: |
  #       docker build -t ${{ secrets.DOCKER_USER }}/$IMAGE_NAME:$IMAGE_TAG .

  #   - name: Push Docker image
  #     working-directory: MemoryGameBackEnd
  #     run: |
  #       docker push ${{ secrets.DOCKER_USER }}/$IMAGE_NAME:$IMAGE_TAG

    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v1.2.2
      with:
        host: ${{ secrets.DO_HOST }}
        username: root
        key: ${{ secrets.DO_SSH }}
        script: |
          # Pull the latest image
          docker pull ${{ secrets.DOCKER_USER }}/$IMAGE_NAME
          
          # Stop and remove existing container if running
          if [ "$(docker ps -f "name=$IMAGE_NAME" --format "{{.Status}}")" ]; then
            docker stop $IMAGE_NAME
            docker rm $IMAGE_NAME
          fi
          
          # Run the new container with environment variables
          docker run -d -p 80:5000 -e "ConnectionStrings__MySQL=${{ secrets.CONNECTION_STRING }}" ${{ secrets.DOCKER_USER }}/$IMAGE_NAME
